// Generated by CoffeeScript 1.5.0
/*
  http://github.com/paulyoung/require-cson
*/

var nodeRequire;

nodeRequire = require.nodeRequire;

define(['coffee-script'], function(CoffeeScript) {
  var buildMap, fetchText, fs, getXhr, progIds, _ref;
  progIds = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0"];
  fetchText = function() {
    throw new Error("Environment unsupported.");
  };
  if ((typeof process !== "undefined" && process !== null ? (_ref = process.versions) != null ? _ref.node : void 0 : void 0) != null) {
    fs = nodeRequire('fs');
    fetchText = function(path, callback) {
      return callback(fs.readFileSync(path, "utf8"));
    };
  } else if ((((typeof window !== "undefined" && window !== null ? window.navigator : void 0) != null) && ((typeof window !== "undefined" && window !== null ? window.document : void 0) != null)) || (typeof importScripts !== "undefined" && importScripts !== null)) {
    getXhr = function() {
      var i, progId, xhr;
      if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
        return new XMLHttpRequest();
      } else {
        i = 0;
        while (i < 3) {
          progId = progIds[i];
          try {
            xhr = new ActiveXObject(progId);
          } catch (_error) {}
          if (xhr) {
            progIds = [progId];
            break;
          }
          i += 1;
        }
      }
      if (!xhr) {
        throw new Error("getXhr(): XMLHttpRequest not available");
      }
      return xhr;
    };
    fetchText = function(url, callback) {
      var xhr;
      xhr = getXhr();
      xhr.open("GET", url, true);
      xhr.onreadystatechange = function(evt) {
        if (xhr.readyState === 4) {
          return callback(xhr.responseText);
        }
      };
      return xhr.send(null);
    };
  } else if (typeof Packages !== "undefined" && Packages !== null) {
    fetchText = function(path, callback) {
      var content, encoding, file, input, line, lineSeparator, stringBuffer;
      stringBuffer = void 0;
      line = void 0;
      encoding = "utf-8";
      file = new java.io.File(path);
      lineSeparator = java.lang.System.getProperty("line.separator");
      input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding));
      content = "";
      try {
        stringBuffer = new java.lang.StringBuffer();
        line = input.readLine();
        if (line && line.length() && line.charAt(0) === 0xfeff) {
          line = line.substring(1);
        }
        stringBuffer.append(line);
        while ((line = input.readLine()) !== null) {
          stringBuffer.append(lineSeparator);
          stringBuffer.append(line);
        }
        content = String(stringBuffer.toString());
      } finally {
        input.close();
      }
      return callback(content);
    };
  }
  buildMap = {};
  return {
    load: function(name, req, onLoad, config) {
      if (config.isBuild) {
        return fetchText(req.toUrl("" + name + ".cson"), function(data) {
          try {
            data = JSON.stringify(CoffeeScript["eval"](data, {
              bare: true,
              sandbox: true
            }));
          } catch (err) {
            throw err;
          }
          buildMap[name] = data;
          return onLoad(data);
        });
      } else {
        return onLoad(null);
      }
    },
    write: function(pluginName, moduleName, write) {
      if (moduleName in buildMap) {
        return write.asModule(pluginName + "!" + moduleName, "define(function() {\n  return " + buildMap[moduleName] + ";\n});");
      }
    }
  };
});
